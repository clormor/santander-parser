buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.20.0'
    classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
  }
}

plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'maven'
    id 'signing'
    id 'org.inferred.processors' version '2.1.0'
    id 'com.palantir.circle.style' version '1.1.4'
    id 'net.researchgate.release' version '2.8.0'
}

apply plugin: 'com.bmuschko.nexus'
apply plugin: 'io.codearte.nexus-staging'

ext.nexusUsername = "$System.env.MAVEN_USER"
ext.nexusPassword = "$System.env.MAVEN_PASSWORD"

sourceCompatibility = '1.8'
targetCompatibility = '1.8'
group = 'io.github.clormor'

ext.'signing.keyId' = "$System.env.MAVEN_SIGN_KEY_ID"
ext.'signing.secretKeyRingFile' = "$System.env.MAVEN_SIGN_KEY_FILE"
ext.'signing.password' = "$System.env.MAVEN_SIGN_KEY_PASSWORD"

repositories {
    mavenCentral()
}

sourceSets {
    integrationTest {
        compileClasspath += sourceSets.main.output + configurations.testCompile
        runtimeClasspath += output + compileClasspath + configurations.testRuntime
    }
}

dependencies {
    compile "com.google.guava:guava:$guavaVersion"
    compile "joda-time:joda-time:$jodaTimeVersion"
    compile "org.apache.pdfbox:pdfbox:$pdfBoxVersion"
    implementation "org.immutables:value-annotations:$immutablesVersion"
    annotationProcessor "org.immutables:value:$immutablesVersion"
	testCompile "junit:junit:$junitVersion"
}

idea {
    module {
        testSourceDirs += sourceSets.integrationTest.java.srcDirs
        testResourceDirs += sourceSets.integrationTest.resources.srcDirs
        scopes.TEST.plus += [ configurations.integrationTestCompile ]
        inheritOutputDirs = true
        downloadJavadoc = true
        downloadSources = true
        scopes.PROVIDED.plus += [configurations.compileOnly]
        iml {
            whenMerged { module ->
                def compileDeps = module.dependencies.findAll { it.scope == 'COMPILE' }
                compileDeps*.exported = true
            }
        }
    }
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    mustRunAfter test
}

check.dependsOn integrationTest

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

release {
    git {
        requireBranch = 'develop'
        pushReleaseVersionBranch = 'release'
    }
}

nexusStaging {
    delayBetweenRetriesInMillis = 5000
}

